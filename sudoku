#this project will help learning backtracking

#create the board or import one
board = [  
    [7,8,0,4,0,0,1,2,0],
    [6,0,0,0,7,5,0,0,9],
    [0,0,0,6,0,1,0,7,8],
    [0,0,7,0,4,0,2,6,0],
    [0,0,1,0,5,0,9,3,0],
    [9,0,4,0,6,0,0,0,5],
    [0,7,0,3,0,0,0,1,2],
    [1,2,0,0,0,7,4,0,0],
    [0,4,9,2,0,6,0,0,7]
    

]

def print_board(bo):
#we have to create a height and lenght first line for height cuz its lenght of the array
    for i in range(len(bo)):
        #if the i can be divided by 3 and its not 0, we can print a break so it would print every 3 lines
        if i%3 == 0 and i != 0:
            print(" ------------------------- ")
    
        for j in range(len(bo[0])):
             # now we doing the lenght of a line which is len of the inside array thats why we do [0], using first array as basis
            if j%3 == 0 and j!= 0:
                print(" | ",end = " ")

            if j == 8:
                print(bo[i][j])
            # end here means that we want a space after every  |
            else:
                print(str(bo[i][j])+ " ", end = "")
  

# steps to sudoku solver

# Step 1 : random square (function to find an exmpty square)
def find_empty(bo):
    for i in range(len(bo)):
        for j in range(len(bo[0])):
            if bo[i][j] == 0:
                return (i,j) # row,col
    return None

#check if valid
# Step 2 : try all numbers in that square (for loop)
def valid(bo, num, pos):
    #num is the number we added in
    #check row by row so that no 2 same number in one column
    for i in range(len(bo[0])):
        if bo[pos[0]][i]== num and pos[1]!=i: #pos[0] just means row and pos[1] is column 
            #ignore that position if we just inserted it
            return False
    
    #check column
    for i in range(len(bo[0])):
        if bo[i][pos[1]]== num and pos[0]!=i:
            return False
    
    #check box
    box_y = pos[0] // 3
    box_x = pos[1] // 3
    

    for i in range(box_y * 3, box_y*3+3): #do the math , its from box 0,1,2 and each of them contains 
        #box 0 = 0,1,2
        #box 1 = 3,4,5
        #box 2 = 6,7,8
        for j in range(box_x*3, box_x*3 + 3):
            if bo[i][j] == num and (i,j) != pos: #the and is to make sure our input wont be verified
                return False

    return True




# Step 3 : if a number works, continue to next square ( if )
def solve(bo):
    find = find_empty(bo)
    if not find:
        return True
    else:
        row, col = find
    
    for i in range(1,10):
        if valid(bo,i, (row,col)):
            bo[row][col] = i

            if solve(bo):
                return True
            
            bo[row][col] = 0
    return False

# Step 4 : redo the steps (a entire loop or recursive)

# Step 5 : backtrack when soemthing is wrong
print_board(board)

solve(board)
print("_____________________________________")
print_board(board)
